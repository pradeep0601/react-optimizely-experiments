{"version":3,"sources":["logo.svg","PurchaseButton.js","App.js","reportWebVitals.js","index.js"],"names":["PurchaseButton","onClick","optimizely","props","console","log","track","this","Component","createInstance","sdkKey","WrappedPurchaseButton","withOptimizely","userAgent","window","navigator","App","user","id","attributes","browser","className","src","logo","alt","feature","enabled","variables","amount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAAe,MAA0B,iC,wCCoBxBA,E,4MAjBbC,QAAU,WAAO,IACPC,EAAe,EAAKC,MAApBD,WAERE,QAAQC,IAAI,2BACZH,EAAWI,MAAM,a,uDAIjB,OACE,wBAAQL,QAASM,KAAKN,QAAtB,0B,GAVqBO,aCWvBN,EAAaO,yBAAe,CAChCC,OAAQ,0BAGJC,EAAwBC,yBAAeZ,GAEvCa,EAAYC,OAAOC,UAAUF,UACnCT,QAAQC,IAAI,uBAAwBQ,GA+BrBG,MA9Bf,WACE,OACE,cAAC,qBAAD,CACAd,WAAcA,EACde,KAAM,CACJC,GAAI,yCACJC,WAAY,CACVC,QAAS,CAACP,eALd,SASA,qBAAKQ,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,4BACE,cAAC,oBAAD,CAAmBC,QAAU,WAA7B,SACG,SAACC,EAASC,GAAV,OACCD,EAAO,6BAAyBC,EAAUC,QAAU,mCAI1D,4BACA,cAACjB,EAAD,cC/BOkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e519d3b5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\r\n\r\nclass PurchaseButton extends Component {\r\n    onClick = () => {\r\n      const { optimizely } = this.props\r\n      // after weâ€™ve confirmed purchase completed\r\n      console.log('====Purchase clicked===');\r\n      optimizely.track('purchase')\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <button onClick={this.onClick}>\r\n          Purchase\r\n        </button>\r\n      )\r\n    }\r\n  }\r\n  \r\n  \r\n  export default PurchaseButton;","import React from 'react';\nimport {\n  createInstance,\n  OptimizelyFeature,\n  OptimizelyProvider,\n  withOptimizely,\n} from '@optimizely/react-sdk';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport PurchaseButton from './PurchaseButton';\n\nconst optimizely = createInstance({\n  sdkKey: '8HHXZSoTB6TznYceH6Scr'\n});\n\nconst WrappedPurchaseButton = withOptimizely(PurchaseButton)\n\nconst userAgent = window.navigator.userAgent\nconsole.log('=========userAgent: ', userAgent);\nfunction App() {\n  return (\n    <OptimizelyProvider\n    optimizely = {optimizely}\n    user={{\n      id: 'testuser123413122121q2375812qq2123da09',\n      attributes: {\n        browser: {userAgent}\n      }\n    }}\n    >\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          <OptimizelyFeature feature = 'discount'>\n            {(enabled, variables) => (\n              enabled ? `Got a discount of $${variables.amount}`: 'Regular price, no discount!'\n            )}\n          </OptimizelyFeature>\n        </p>\n        <p>\n        <WrappedPurchaseButton></WrappedPurchaseButton>\n        </p>\n      </header>\n    </div>\n    </OptimizelyProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}